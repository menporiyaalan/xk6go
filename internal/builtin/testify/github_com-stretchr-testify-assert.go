// SPDX-FileCopyrightText: 2023 Iv√°n Szkiba
//
// SPDX-License-Identifier: MIT

// Code generated by 'yaegi extract github.com/stretchr/testify/assert'. DO NOT EDIT.

package testify

import (
	"github.com/stretchr/testify/assert"
	"reflect"
)

func init() {
	Symbols["github.com/stretchr/testify/assert/assert"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AnError":               reflect.ValueOf(&assert.AnError).Elem(),
		"CallerInfo":            reflect.ValueOf(assert.CallerInfo),
		"Condition":             reflect.ValueOf(assert.Condition),
		"Conditionf":            reflect.ValueOf(assert.Conditionf),
		"Contains":              reflect.ValueOf(assert.Contains),
		"Containsf":             reflect.ValueOf(assert.Containsf),
		"DirExists":             reflect.ValueOf(assert.DirExists),
		"DirExistsf":            reflect.ValueOf(assert.DirExistsf),
		"ElementsMatch":         reflect.ValueOf(assert.ElementsMatch),
		"ElementsMatchf":        reflect.ValueOf(assert.ElementsMatchf),
		"Empty":                 reflect.ValueOf(assert.Empty),
		"Emptyf":                reflect.ValueOf(assert.Emptyf),
		"Equal":                 reflect.ValueOf(assert.Equal),
		"EqualError":            reflect.ValueOf(assert.EqualError),
		"EqualErrorf":           reflect.ValueOf(assert.EqualErrorf),
		"EqualValues":           reflect.ValueOf(assert.EqualValues),
		"EqualValuesf":          reflect.ValueOf(assert.EqualValuesf),
		"Equalf":                reflect.ValueOf(assert.Equalf),
		"Error":                 reflect.ValueOf(assert.Error),
		"ErrorAs":               reflect.ValueOf(assert.ErrorAs),
		"ErrorAsf":              reflect.ValueOf(assert.ErrorAsf),
		"ErrorContains":         reflect.ValueOf(assert.ErrorContains),
		"ErrorContainsf":        reflect.ValueOf(assert.ErrorContainsf),
		"ErrorIs":               reflect.ValueOf(assert.ErrorIs),
		"ErrorIsf":              reflect.ValueOf(assert.ErrorIsf),
		"Errorf":                reflect.ValueOf(assert.Errorf),
		"Eventually":            reflect.ValueOf(assert.Eventually),
		"Eventuallyf":           reflect.ValueOf(assert.Eventuallyf),
		"Exactly":               reflect.ValueOf(assert.Exactly),
		"Exactlyf":              reflect.ValueOf(assert.Exactlyf),
		"Fail":                  reflect.ValueOf(assert.Fail),
		"FailNow":               reflect.ValueOf(assert.FailNow),
		"FailNowf":              reflect.ValueOf(assert.FailNowf),
		"Failf":                 reflect.ValueOf(assert.Failf),
		"False":                 reflect.ValueOf(assert.False),
		"Falsef":                reflect.ValueOf(assert.Falsef),
		"FileExists":            reflect.ValueOf(assert.FileExists),
		"FileExistsf":           reflect.ValueOf(assert.FileExistsf),
		"Greater":               reflect.ValueOf(assert.Greater),
		"GreaterOrEqual":        reflect.ValueOf(assert.GreaterOrEqual),
		"GreaterOrEqualf":       reflect.ValueOf(assert.GreaterOrEqualf),
		"Greaterf":              reflect.ValueOf(assert.Greaterf),
		"HTTPBody":              reflect.ValueOf(assert.HTTPBody),
		"HTTPBodyContains":      reflect.ValueOf(assert.HTTPBodyContains),
		"HTTPBodyContainsf":     reflect.ValueOf(assert.HTTPBodyContainsf),
		"HTTPBodyNotContains":   reflect.ValueOf(assert.HTTPBodyNotContains),
		"HTTPBodyNotContainsf":  reflect.ValueOf(assert.HTTPBodyNotContainsf),
		"HTTPError":             reflect.ValueOf(assert.HTTPError),
		"HTTPErrorf":            reflect.ValueOf(assert.HTTPErrorf),
		"HTTPRedirect":          reflect.ValueOf(assert.HTTPRedirect),
		"HTTPRedirectf":         reflect.ValueOf(assert.HTTPRedirectf),
		"HTTPStatusCode":        reflect.ValueOf(assert.HTTPStatusCode),
		"HTTPStatusCodef":       reflect.ValueOf(assert.HTTPStatusCodef),
		"HTTPSuccess":           reflect.ValueOf(assert.HTTPSuccess),
		"HTTPSuccessf":          reflect.ValueOf(assert.HTTPSuccessf),
		"Implements":            reflect.ValueOf(assert.Implements),
		"Implementsf":           reflect.ValueOf(assert.Implementsf),
		"InDelta":               reflect.ValueOf(assert.InDelta),
		"InDeltaMapValues":      reflect.ValueOf(assert.InDeltaMapValues),
		"InDeltaMapValuesf":     reflect.ValueOf(assert.InDeltaMapValuesf),
		"InDeltaSlice":          reflect.ValueOf(assert.InDeltaSlice),
		"InDeltaSlicef":         reflect.ValueOf(assert.InDeltaSlicef),
		"InDeltaf":              reflect.ValueOf(assert.InDeltaf),
		"InEpsilon":             reflect.ValueOf(assert.InEpsilon),
		"InEpsilonSlice":        reflect.ValueOf(assert.InEpsilonSlice),
		"InEpsilonSlicef":       reflect.ValueOf(assert.InEpsilonSlicef),
		"InEpsilonf":            reflect.ValueOf(assert.InEpsilonf),
		"IsDecreasing":          reflect.ValueOf(assert.IsDecreasing),
		"IsDecreasingf":         reflect.ValueOf(assert.IsDecreasingf),
		"IsIncreasing":          reflect.ValueOf(assert.IsIncreasing),
		"IsIncreasingf":         reflect.ValueOf(assert.IsIncreasingf),
		"IsNonDecreasing":       reflect.ValueOf(assert.IsNonDecreasing),
		"IsNonDecreasingf":      reflect.ValueOf(assert.IsNonDecreasingf),
		"IsNonIncreasing":       reflect.ValueOf(assert.IsNonIncreasing),
		"IsNonIncreasingf":      reflect.ValueOf(assert.IsNonIncreasingf),
		"IsType":                reflect.ValueOf(assert.IsType),
		"IsTypef":               reflect.ValueOf(assert.IsTypef),
		"JSONEq":                reflect.ValueOf(assert.JSONEq),
		"JSONEqf":               reflect.ValueOf(assert.JSONEqf),
		"Len":                   reflect.ValueOf(assert.Len),
		"Lenf":                  reflect.ValueOf(assert.Lenf),
		"Less":                  reflect.ValueOf(assert.Less),
		"LessOrEqual":           reflect.ValueOf(assert.LessOrEqual),
		"LessOrEqualf":          reflect.ValueOf(assert.LessOrEqualf),
		"Lessf":                 reflect.ValueOf(assert.Lessf),
		"Negative":              reflect.ValueOf(assert.Negative),
		"Negativef":             reflect.ValueOf(assert.Negativef),
		"Never":                 reflect.ValueOf(assert.Never),
		"Neverf":                reflect.ValueOf(assert.Neverf),
		"New":                   reflect.ValueOf(assert.New),
		"Nil":                   reflect.ValueOf(assert.Nil),
		"Nilf":                  reflect.ValueOf(assert.Nilf),
		"NoDirExists":           reflect.ValueOf(assert.NoDirExists),
		"NoDirExistsf":          reflect.ValueOf(assert.NoDirExistsf),
		"NoError":               reflect.ValueOf(assert.NoError),
		"NoErrorf":              reflect.ValueOf(assert.NoErrorf),
		"NoFileExists":          reflect.ValueOf(assert.NoFileExists),
		"NoFileExistsf":         reflect.ValueOf(assert.NoFileExistsf),
		"NotContains":           reflect.ValueOf(assert.NotContains),
		"NotContainsf":          reflect.ValueOf(assert.NotContainsf),
		"NotEmpty":              reflect.ValueOf(assert.NotEmpty),
		"NotEmptyf":             reflect.ValueOf(assert.NotEmptyf),
		"NotEqual":              reflect.ValueOf(assert.NotEqual),
		"NotEqualValues":        reflect.ValueOf(assert.NotEqualValues),
		"NotEqualValuesf":       reflect.ValueOf(assert.NotEqualValuesf),
		"NotEqualf":             reflect.ValueOf(assert.NotEqualf),
		"NotErrorIs":            reflect.ValueOf(assert.NotErrorIs),
		"NotErrorIsf":           reflect.ValueOf(assert.NotErrorIsf),
		"NotNil":                reflect.ValueOf(assert.NotNil),
		"NotNilf":               reflect.ValueOf(assert.NotNilf),
		"NotPanics":             reflect.ValueOf(assert.NotPanics),
		"NotPanicsf":            reflect.ValueOf(assert.NotPanicsf),
		"NotRegexp":             reflect.ValueOf(assert.NotRegexp),
		"NotRegexpf":            reflect.ValueOf(assert.NotRegexpf),
		"NotSame":               reflect.ValueOf(assert.NotSame),
		"NotSamef":              reflect.ValueOf(assert.NotSamef),
		"NotSubset":             reflect.ValueOf(assert.NotSubset),
		"NotSubsetf":            reflect.ValueOf(assert.NotSubsetf),
		"NotZero":               reflect.ValueOf(assert.NotZero),
		"NotZerof":              reflect.ValueOf(assert.NotZerof),
		"ObjectsAreEqual":       reflect.ValueOf(assert.ObjectsAreEqual),
		"ObjectsAreEqualValues": reflect.ValueOf(assert.ObjectsAreEqualValues),
		"Panics":                reflect.ValueOf(assert.Panics),
		"PanicsWithError":       reflect.ValueOf(assert.PanicsWithError),
		"PanicsWithErrorf":      reflect.ValueOf(assert.PanicsWithErrorf),
		"PanicsWithValue":       reflect.ValueOf(assert.PanicsWithValue),
		"PanicsWithValuef":      reflect.ValueOf(assert.PanicsWithValuef),
		"Panicsf":               reflect.ValueOf(assert.Panicsf),
		"Positive":              reflect.ValueOf(assert.Positive),
		"Positivef":             reflect.ValueOf(assert.Positivef),
		"Regexp":                reflect.ValueOf(assert.Regexp),
		"Regexpf":               reflect.ValueOf(assert.Regexpf),
		"Same":                  reflect.ValueOf(assert.Same),
		"Samef":                 reflect.ValueOf(assert.Samef),
		"Subset":                reflect.ValueOf(assert.Subset),
		"Subsetf":               reflect.ValueOf(assert.Subsetf),
		"True":                  reflect.ValueOf(assert.True),
		"Truef":                 reflect.ValueOf(assert.Truef),
		"WithinDuration":        reflect.ValueOf(assert.WithinDuration),
		"WithinDurationf":       reflect.ValueOf(assert.WithinDurationf),
		"WithinRange":           reflect.ValueOf(assert.WithinRange),
		"WithinRangef":          reflect.ValueOf(assert.WithinRangef),
		"YAMLEq":                reflect.ValueOf(assert.YAMLEq),
		"YAMLEqf":               reflect.ValueOf(assert.YAMLEqf),
		"Zero":                  reflect.ValueOf(assert.Zero),
		"Zerof":                 reflect.ValueOf(assert.Zerof),

		// type definitions
		"Assertions":              reflect.ValueOf((*assert.Assertions)(nil)),
		"BoolAssertionFunc":       reflect.ValueOf((*assert.BoolAssertionFunc)(nil)),
		"CompareType":             reflect.ValueOf((*assert.CompareType)(nil)),
		"Comparison":              reflect.ValueOf((*assert.Comparison)(nil)),
		"ComparisonAssertionFunc": reflect.ValueOf((*assert.ComparisonAssertionFunc)(nil)),
		"ErrorAssertionFunc":      reflect.ValueOf((*assert.ErrorAssertionFunc)(nil)),
		"PanicTestFunc":           reflect.ValueOf((*assert.PanicTestFunc)(nil)),
		"TestingT":                reflect.ValueOf((*assert.TestingT)(nil)),
		"ValueAssertionFunc":      reflect.ValueOf((*assert.ValueAssertionFunc)(nil)),

		// interface wrapper definitions
		"_TestingT": reflect.ValueOf((*_github_com_stretchr_testify_assert_TestingT)(nil)),
	}
}

// _github_com_stretchr_testify_assert_TestingT is an interface wrapper for TestingT type
type _github_com_stretchr_testify_assert_TestingT struct {
	IValue  interface{}
	WErrorf func(format string, args ...interface{})
}

func (W _github_com_stretchr_testify_assert_TestingT) Errorf(format string, args ...interface{}) {
	W.WErrorf(format, args...)
}
