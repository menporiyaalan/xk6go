// SPDX-FileCopyrightText: 2023 Iv√°n Szkiba
//
// SPDX-License-Identifier: MIT

// Code generated by 'yaegi extract github.com/stretchr/testify/require'. DO NOT EDIT.

package testify

import (
	"github.com/stretchr/testify/require"
	"reflect"
)

func init() {
	Symbols["github.com/stretchr/testify/require/require"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Condition":            reflect.ValueOf(require.Condition),
		"Conditionf":           reflect.ValueOf(require.Conditionf),
		"Contains":             reflect.ValueOf(require.Contains),
		"Containsf":            reflect.ValueOf(require.Containsf),
		"DirExists":            reflect.ValueOf(require.DirExists),
		"DirExistsf":           reflect.ValueOf(require.DirExistsf),
		"ElementsMatch":        reflect.ValueOf(require.ElementsMatch),
		"ElementsMatchf":       reflect.ValueOf(require.ElementsMatchf),
		"Empty":                reflect.ValueOf(require.Empty),
		"Emptyf":               reflect.ValueOf(require.Emptyf),
		"Equal":                reflect.ValueOf(require.Equal),
		"EqualError":           reflect.ValueOf(require.EqualError),
		"EqualErrorf":          reflect.ValueOf(require.EqualErrorf),
		"EqualValues":          reflect.ValueOf(require.EqualValues),
		"EqualValuesf":         reflect.ValueOf(require.EqualValuesf),
		"Equalf":               reflect.ValueOf(require.Equalf),
		"Error":                reflect.ValueOf(require.Error),
		"ErrorAs":              reflect.ValueOf(require.ErrorAs),
		"ErrorAsf":             reflect.ValueOf(require.ErrorAsf),
		"ErrorContains":        reflect.ValueOf(require.ErrorContains),
		"ErrorContainsf":       reflect.ValueOf(require.ErrorContainsf),
		"ErrorIs":              reflect.ValueOf(require.ErrorIs),
		"ErrorIsf":             reflect.ValueOf(require.ErrorIsf),
		"Errorf":               reflect.ValueOf(require.Errorf),
		"Eventually":           reflect.ValueOf(require.Eventually),
		"Eventuallyf":          reflect.ValueOf(require.Eventuallyf),
		"Exactly":              reflect.ValueOf(require.Exactly),
		"Exactlyf":             reflect.ValueOf(require.Exactlyf),
		"Fail":                 reflect.ValueOf(require.Fail),
		"FailNow":              reflect.ValueOf(require.FailNow),
		"FailNowf":             reflect.ValueOf(require.FailNowf),
		"Failf":                reflect.ValueOf(require.Failf),
		"False":                reflect.ValueOf(require.False),
		"Falsef":               reflect.ValueOf(require.Falsef),
		"FileExists":           reflect.ValueOf(require.FileExists),
		"FileExistsf":          reflect.ValueOf(require.FileExistsf),
		"Greater":              reflect.ValueOf(require.Greater),
		"GreaterOrEqual":       reflect.ValueOf(require.GreaterOrEqual),
		"GreaterOrEqualf":      reflect.ValueOf(require.GreaterOrEqualf),
		"Greaterf":             reflect.ValueOf(require.Greaterf),
		"HTTPBodyContains":     reflect.ValueOf(require.HTTPBodyContains),
		"HTTPBodyContainsf":    reflect.ValueOf(require.HTTPBodyContainsf),
		"HTTPBodyNotContains":  reflect.ValueOf(require.HTTPBodyNotContains),
		"HTTPBodyNotContainsf": reflect.ValueOf(require.HTTPBodyNotContainsf),
		"HTTPError":            reflect.ValueOf(require.HTTPError),
		"HTTPErrorf":           reflect.ValueOf(require.HTTPErrorf),
		"HTTPRedirect":         reflect.ValueOf(require.HTTPRedirect),
		"HTTPRedirectf":        reflect.ValueOf(require.HTTPRedirectf),
		"HTTPStatusCode":       reflect.ValueOf(require.HTTPStatusCode),
		"HTTPStatusCodef":      reflect.ValueOf(require.HTTPStatusCodef),
		"HTTPSuccess":          reflect.ValueOf(require.HTTPSuccess),
		"HTTPSuccessf":         reflect.ValueOf(require.HTTPSuccessf),
		"Implements":           reflect.ValueOf(require.Implements),
		"Implementsf":          reflect.ValueOf(require.Implementsf),
		"InDelta":              reflect.ValueOf(require.InDelta),
		"InDeltaMapValues":     reflect.ValueOf(require.InDeltaMapValues),
		"InDeltaMapValuesf":    reflect.ValueOf(require.InDeltaMapValuesf),
		"InDeltaSlice":         reflect.ValueOf(require.InDeltaSlice),
		"InDeltaSlicef":        reflect.ValueOf(require.InDeltaSlicef),
		"InDeltaf":             reflect.ValueOf(require.InDeltaf),
		"InEpsilon":            reflect.ValueOf(require.InEpsilon),
		"InEpsilonSlice":       reflect.ValueOf(require.InEpsilonSlice),
		"InEpsilonSlicef":      reflect.ValueOf(require.InEpsilonSlicef),
		"InEpsilonf":           reflect.ValueOf(require.InEpsilonf),
		"IsDecreasing":         reflect.ValueOf(require.IsDecreasing),
		"IsDecreasingf":        reflect.ValueOf(require.IsDecreasingf),
		"IsIncreasing":         reflect.ValueOf(require.IsIncreasing),
		"IsIncreasingf":        reflect.ValueOf(require.IsIncreasingf),
		"IsNonDecreasing":      reflect.ValueOf(require.IsNonDecreasing),
		"IsNonDecreasingf":     reflect.ValueOf(require.IsNonDecreasingf),
		"IsNonIncreasing":      reflect.ValueOf(require.IsNonIncreasing),
		"IsNonIncreasingf":     reflect.ValueOf(require.IsNonIncreasingf),
		"IsType":               reflect.ValueOf(require.IsType),
		"IsTypef":              reflect.ValueOf(require.IsTypef),
		"JSONEq":               reflect.ValueOf(require.JSONEq),
		"JSONEqf":              reflect.ValueOf(require.JSONEqf),
		"Len":                  reflect.ValueOf(require.Len),
		"Lenf":                 reflect.ValueOf(require.Lenf),
		"Less":                 reflect.ValueOf(require.Less),
		"LessOrEqual":          reflect.ValueOf(require.LessOrEqual),
		"LessOrEqualf":         reflect.ValueOf(require.LessOrEqualf),
		"Lessf":                reflect.ValueOf(require.Lessf),
		"Negative":             reflect.ValueOf(require.Negative),
		"Negativef":            reflect.ValueOf(require.Negativef),
		"Never":                reflect.ValueOf(require.Never),
		"Neverf":               reflect.ValueOf(require.Neverf),
		"New":                  reflect.ValueOf(require.New),
		"Nil":                  reflect.ValueOf(require.Nil),
		"Nilf":                 reflect.ValueOf(require.Nilf),
		"NoDirExists":          reflect.ValueOf(require.NoDirExists),
		"NoDirExistsf":         reflect.ValueOf(require.NoDirExistsf),
		"NoError":              reflect.ValueOf(require.NoError),
		"NoErrorf":             reflect.ValueOf(require.NoErrorf),
		"NoFileExists":         reflect.ValueOf(require.NoFileExists),
		"NoFileExistsf":        reflect.ValueOf(require.NoFileExistsf),
		"NotContains":          reflect.ValueOf(require.NotContains),
		"NotContainsf":         reflect.ValueOf(require.NotContainsf),
		"NotEmpty":             reflect.ValueOf(require.NotEmpty),
		"NotEmptyf":            reflect.ValueOf(require.NotEmptyf),
		"NotEqual":             reflect.ValueOf(require.NotEqual),
		"NotEqualValues":       reflect.ValueOf(require.NotEqualValues),
		"NotEqualValuesf":      reflect.ValueOf(require.NotEqualValuesf),
		"NotEqualf":            reflect.ValueOf(require.NotEqualf),
		"NotErrorIs":           reflect.ValueOf(require.NotErrorIs),
		"NotErrorIsf":          reflect.ValueOf(require.NotErrorIsf),
		"NotNil":               reflect.ValueOf(require.NotNil),
		"NotNilf":              reflect.ValueOf(require.NotNilf),
		"NotPanics":            reflect.ValueOf(require.NotPanics),
		"NotPanicsf":           reflect.ValueOf(require.NotPanicsf),
		"NotRegexp":            reflect.ValueOf(require.NotRegexp),
		"NotRegexpf":           reflect.ValueOf(require.NotRegexpf),
		"NotSame":              reflect.ValueOf(require.NotSame),
		"NotSamef":             reflect.ValueOf(require.NotSamef),
		"NotSubset":            reflect.ValueOf(require.NotSubset),
		"NotSubsetf":           reflect.ValueOf(require.NotSubsetf),
		"NotZero":              reflect.ValueOf(require.NotZero),
		"NotZerof":             reflect.ValueOf(require.NotZerof),
		"Panics":               reflect.ValueOf(require.Panics),
		"PanicsWithError":      reflect.ValueOf(require.PanicsWithError),
		"PanicsWithErrorf":     reflect.ValueOf(require.PanicsWithErrorf),
		"PanicsWithValue":      reflect.ValueOf(require.PanicsWithValue),
		"PanicsWithValuef":     reflect.ValueOf(require.PanicsWithValuef),
		"Panicsf":              reflect.ValueOf(require.Panicsf),
		"Positive":             reflect.ValueOf(require.Positive),
		"Positivef":            reflect.ValueOf(require.Positivef),
		"Regexp":               reflect.ValueOf(require.Regexp),
		"Regexpf":              reflect.ValueOf(require.Regexpf),
		"Same":                 reflect.ValueOf(require.Same),
		"Samef":                reflect.ValueOf(require.Samef),
		"Subset":               reflect.ValueOf(require.Subset),
		"Subsetf":              reflect.ValueOf(require.Subsetf),
		"True":                 reflect.ValueOf(require.True),
		"Truef":                reflect.ValueOf(require.Truef),
		"WithinDuration":       reflect.ValueOf(require.WithinDuration),
		"WithinDurationf":      reflect.ValueOf(require.WithinDurationf),
		"WithinRange":          reflect.ValueOf(require.WithinRange),
		"WithinRangef":         reflect.ValueOf(require.WithinRangef),
		"YAMLEq":               reflect.ValueOf(require.YAMLEq),
		"YAMLEqf":              reflect.ValueOf(require.YAMLEqf),
		"Zero":                 reflect.ValueOf(require.Zero),
		"Zerof":                reflect.ValueOf(require.Zerof),

		// type definitions
		"Assertions":              reflect.ValueOf((*require.Assertions)(nil)),
		"BoolAssertionFunc":       reflect.ValueOf((*require.BoolAssertionFunc)(nil)),
		"ComparisonAssertionFunc": reflect.ValueOf((*require.ComparisonAssertionFunc)(nil)),
		"ErrorAssertionFunc":      reflect.ValueOf((*require.ErrorAssertionFunc)(nil)),
		"TestingT":                reflect.ValueOf((*require.TestingT)(nil)),
		"ValueAssertionFunc":      reflect.ValueOf((*require.ValueAssertionFunc)(nil)),

		// interface wrapper definitions
		"_TestingT": reflect.ValueOf((*_github_com_stretchr_testify_require_TestingT)(nil)),
	}
}

// _github_com_stretchr_testify_require_TestingT is an interface wrapper for TestingT type
type _github_com_stretchr_testify_require_TestingT struct {
	IValue   interface{}
	WErrorf  func(format string, args ...interface{})
	WFailNow func()
}

func (W _github_com_stretchr_testify_require_TestingT) Errorf(format string, args ...interface{}) {
	W.WErrorf(format, args...)
}
func (W _github_com_stretchr_testify_require_TestingT) FailNow() {
	W.WFailNow()
}
