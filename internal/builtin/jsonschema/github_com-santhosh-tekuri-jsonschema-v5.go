// SPDX-FileCopyrightText: 2023 Iv√°n Szkiba
//
// SPDX-License-Identifier: MIT

// Code generated by 'yaegi extract github.com/santhosh-tekuri/jsonschema/v5'. DO NOT EDIT.

package jsonschema

import (
	"github.com/santhosh-tekuri/jsonschema/v5"
	"reflect"
)

func init() {
	Symbols["github.com/santhosh-tekuri/jsonschema/v5/jsonschema"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Compile":           reflect.ValueOf(jsonschema.Compile),
		"CompileString":     reflect.ValueOf(jsonschema.CompileString),
		"Decoders":          reflect.ValueOf(&jsonschema.Decoders).Elem(),
		"Draft2019":         reflect.ValueOf(&jsonschema.Draft2019).Elem(),
		"Draft2020":         reflect.ValueOf(&jsonschema.Draft2020).Elem(),
		"Draft4":            reflect.ValueOf(&jsonschema.Draft4).Elem(),
		"Draft6":            reflect.ValueOf(&jsonschema.Draft6).Elem(),
		"Draft7":            reflect.ValueOf(&jsonschema.Draft7).Elem(),
		"Formats":           reflect.ValueOf(&jsonschema.Formats).Elem(),
		"LoadURL":           reflect.ValueOf(&jsonschema.LoadURL).Elem(),
		"Loaders":           reflect.ValueOf(&jsonschema.Loaders).Elem(),
		"MediaTypes":        reflect.ValueOf(&jsonschema.MediaTypes).Elem(),
		"MustCompile":       reflect.ValueOf(jsonschema.MustCompile),
		"MustCompileString": reflect.ValueOf(jsonschema.MustCompileString),
		"NewCompiler":       reflect.ValueOf(jsonschema.NewCompiler),

		// type definitions
		"Basic":                reflect.ValueOf((*jsonschema.Basic)(nil)),
		"BasicError":           reflect.ValueOf((*jsonschema.BasicError)(nil)),
		"Compiler":             reflect.ValueOf((*jsonschema.Compiler)(nil)),
		"CompilerContext":      reflect.ValueOf((*jsonschema.CompilerContext)(nil)),
		"Detailed":             reflect.ValueOf((*jsonschema.Detailed)(nil)),
		"Draft":                reflect.ValueOf((*jsonschema.Draft)(nil)),
		"ExtCompiler":          reflect.ValueOf((*jsonschema.ExtCompiler)(nil)),
		"ExtSchema":            reflect.ValueOf((*jsonschema.ExtSchema)(nil)),
		"Flag":                 reflect.ValueOf((*jsonschema.Flag)(nil)),
		"InfiniteLoopError":    reflect.ValueOf((*jsonschema.InfiniteLoopError)(nil)),
		"InvalidJSONTypeError": reflect.ValueOf((*jsonschema.InvalidJSONTypeError)(nil)),
		"LoaderNotFoundError":  reflect.ValueOf((*jsonschema.LoaderNotFoundError)(nil)),
		"Schema":               reflect.ValueOf((*jsonschema.Schema)(nil)),
		"SchemaError":          reflect.ValueOf((*jsonschema.SchemaError)(nil)),
		"ValidationContext":    reflect.ValueOf((*jsonschema.ValidationContext)(nil)),
		"ValidationError":      reflect.ValueOf((*jsonschema.ValidationError)(nil)),

		// interface wrapper definitions
		"_ExtCompiler": reflect.ValueOf((*_github_com_santhosh_tekuri_jsonschema_v5_ExtCompiler)(nil)),
		"_ExtSchema":   reflect.ValueOf((*_github_com_santhosh_tekuri_jsonschema_v5_ExtSchema)(nil)),
	}
}

// _github_com_santhosh_tekuri_jsonschema_v5_ExtCompiler is an interface wrapper for ExtCompiler type
type _github_com_santhosh_tekuri_jsonschema_v5_ExtCompiler struct {
	IValue   interface{}
	WCompile func(ctx jsonschema.CompilerContext, m map[string]interface{}) (jsonschema.ExtSchema, error)
}

func (W _github_com_santhosh_tekuri_jsonschema_v5_ExtCompiler) Compile(ctx jsonschema.CompilerContext, m map[string]interface{}) (jsonschema.ExtSchema, error) {
	return W.WCompile(ctx, m)
}

// _github_com_santhosh_tekuri_jsonschema_v5_ExtSchema is an interface wrapper for ExtSchema type
type _github_com_santhosh_tekuri_jsonschema_v5_ExtSchema struct {
	IValue    interface{}
	WValidate func(ctx jsonschema.ValidationContext, v interface{}) error
}

func (W _github_com_santhosh_tekuri_jsonschema_v5_ExtSchema) Validate(ctx jsonschema.ValidationContext, v interface{}) error {
	return W.WValidate(ctx, v)
}
